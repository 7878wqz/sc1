wait(5)
-- Configuration
local WEBHOOK1 = getgenv().Webhookurl

-- Player Data
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Username = LocalPlayer.Name -- ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ LocalPlayer

-- Utility Functions
local function getPlayerCount()
    local count = 0
    for _ in pairs(game:GetService("Players"):GetPlayers()) do
        count = count + 1
    end
    return count
end

local function safeGetText(path)
    local success, value = pcall(function()
        if path and path.Text then
            return path.Text
        else
            return nil
        end
    end)
    return success and value or "N/A"
end

local function sendWebhook(url, description, fields)
    local success, response = pcall(function()
        local data = {
            ["username"] = "Vector Hub",
            ["avatar_url"] = "https://media.discordapp.net/attachments/1090933613677252690/1405897109542146148/v2_nobg.png?ex=68a07f37&is=689f2db7&hm=2678bcc3009bf3737a8b8c3838dc6fe6e9ab35fb9ecd3419a338728cebfd236c&=&format=webp&quality=lossless&width=798&height=798",
            ["embeds"] = {
                {
                    ["description"] = description,
                    ["color"] = tonumber(0x0000FF),
                    ["type"] = "rich",
                    ["fields"] = fields,
                    ["footer"] = { ["text"] = "Webhook Vector Hub" },
                    ["timestamp"] = DateTime.now():ToIsoDate()
                }
            }
        }
        local newdata = game:GetService("HttpService"):JSONEncode(data)
        local headers = { ["content-type"] = "application/json" }
        local request = http_request or request or HttpPost or syn.request
        request({ Url = url, Body = newdata, Method = "POST", Headers = headers })
    end)
    if success then
        print("Webhook sent successfully to " .. url)
    else
        warn("Webhook failed for " .. url .. ": " .. tostring(response))
    end
end

local playerName = Username
local diamondCount = safeGetText(LocalPlayer.PlayerGui.Interface.DiamondCount.Count)

local function getDayCounter()
    local success, dayCounterElement = pcall(function()
        return LocalPlayer.PlayerGui.Interface:FindFirstChild("DayCounter")
    end)
    
    if success and dayCounterElement then
        return safeGetText(dayCounterElement)
    else
        return "N/A"
    end
end

-- ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
local dayCounter = getDayCounter() -- ‡∏´‡∏£‡∏∑‡∏≠ getDayCounterSafe()

local PlayersMin = getPlayerCount()
local JobId = tostring(game.JobId)
local JoinServer = 'game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, \'' .. JobId .. '\')'

-- Debug: Check GUI Paths
print("Player Name: " .. Username)
print("Diamond Count: " .. tostring(diamondCount))
print("Day Counter: " .. tostring(dayCounter))

-- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà rbxassetid ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™
local classIcons = {
    ["rbxassetid://135633157563830"] = "Ranger",
    ["rbxassetid://97386835202419"] = "Medic",
    ["rbxassetid://73936653507715"] = "Assassin",
    ["rbxassetid://78364585181925"] = "Camper",
    ["rbxassetid://73363116997639"] = "Scavenger",
    ["rbxassetid://79711709548842"] = "Cook",
    ["rbxassetid://78403700557380"] = "Lumberjack",
    ["rbxassetid://138290785520683"] = "Brawler",
    ["rbxassetid://74370257772495"] = "Hunter",
    ["rbxassetid://95302596292756"] = "Decorator",
    ["rbxassetid://95656352227404"] = "Alien",
    ["rbxassetid://125715545693683"] = "Cyborg",
    ["rbxassetid://124568166703850"] = "Farmer",
    ["rbxassetid://99166988801158"] = "Blacksmith",
    ["rbxassetid://94769153922188"] = "Base Defender",
    ["rbxassetid://109047281598240"] = "Berserker",
    ["rbxassetid://112998730830796"] = "Fisherman",
    ["rbxassetid://137652128127625"] = "Pyromaniac",
    ["rbxassetid://111775851263448"] = "Poison Master"
}

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™ (‡πÉ‡∏ä‡πâ LocalPlayer ‡πÅ‡∏ó‡∏ô hardcode)
local function getClassName()
    local className = "N/A"

    -- ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö WinsGui.Badge.Image ‡∏Ç‡∏≠‡∏á LocalPlayer
    local success, badgeImage = pcall(function()
        return workspace[Username].HumanoidRootPart.WinsGui.Badge.Image
    end)
    if success and badgeImage and classIcons[badgeImage] then
        className = classIcons[badgeImage]
        print("Found class from WinsGui.Badge.Image: " .. className)
        return className
    else
        print("No matching class found for WinsGui.Badge.Image: " .. tostring(badgeImage))
    end
    
    if success and badgeImage and classIcons[badgeImage] then
        className = classIcons[badgeImage]
        print("Found class from Character.ClassIconGui.ClassIcon.Image: " .. className)
        return className
    else
        print("No matching class found for Character.ClassIconGui.ClassIcon.Image: " .. tostring(badgeImage))
    end

    return className
end

-- ‡∏î‡∏∂‡∏á ClassName
local ClassName = getClassName()

-- Webhook Payload for Player Data
local fields = {
    {
        ["name"] = "[üë§] Player Name",
        ["value"] = '```' .. playerName .. '```',
        ["inline"] = true
    },
    {
        ["name"] = "[üíé] Diamond Count",
        ["value"] = '```' .. (diamondCount ~= "N/A" and diamondCount or "Not Found") .. '```',
        ["inline"] = true
    },
    {
        ["name"] = "[üïí] Day Counter",
        ["value"] = '```' .. (dayCounter ~= "N/A" and dayCounter or "Not Found") .. '```',
        ["inline"] = true
    },
    {
        ["name"] = "[ü§¥] Class Name",
        ["value"] = '```' .. ClassName .. '```',
        ["inline"] = true
    },
    {
        ["name"] = "[üë•] Players Active",
        ["value"] = '```' .. PlayersMin .. '/5```'
    },
    {
        ["name"] = "[üìÉ] JobID",
        ["value"] = '```' .. JobId .. '```'
    },
    {
        ["name"] = "[üìÅ] Join Server",
        ["value"] = '```' .. JoinServer .. '```'
    }
}

-- ‡∏™‡πà‡∏á Webhook
sendWebhook(WEBHOOK1, "**__99 Night in the Forest Info__**", fields)
